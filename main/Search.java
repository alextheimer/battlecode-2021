package main;

import java.util.List;
import java.util.Set;
import java.util.function.Predicate;
import java.util.function.Function;
import java.util.function.BiFunction;

/**
 * Implements various search algorithms.
 */
public class Search<T> {
	/**
	 * Returns a List of T such that that the first element is startObj, and the final T makes
	 * isEndgameCheck return true.
	 * @param startObj begin the search here. Must lie within valid search space.
	 * @param isEndgameCheck returns true if and only if its argument lies in the endgame.
	 * @param expand returns the set of all T adjacent to its argument.  // TODO(theimer): admissable/consistent stuff
	 * @param cost returns the cost between its two T arguments.
	 * @param heuristic returns an estimated cost to the endgame from the argument T.
	 * @return a List of T such that that the first element is startObj, and the final T makes
	 *     isEndgameCheck return true. Each sequential element was generated by expand() on the
	 *     element before it.
	 */
	public List<T> aStar(T startObj, Predicate<T> isEndgameCheck, Function<T, Set<T>> expand, 
			BiFunction<T, T, Double> cost, Function<T, Double> heuristic) {
		assert false : "Needs implementation!";
		return List.of();
	}
}