package main;

import java.util.List;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;

/**
 * Implements various search algorithms.
 */
public class Search<T> {
	/**
	 * Returns a shortest path between two T.
	 * @param startObj begin the search here. Must lie within valid search space.
	 * @param isEndgameCheck returns true if and only if its argument lies in the endgame.
	 * @param expand returns the set of all T adjacent to its argument.
	 * @param cost returns the cost between its two T arguments. Must return a value >= 0.
	 * @param heuristic returns an estimated cost to the endgame from the argument T. Must be
	 *     both admissible and consistent.
	 * @return a List of T such that that the first element is startObj, and the final T makes
	 *     isEndgameCheck return true. Each sequential element was generated by expand() on the
	 *     element before it (i.e. they are all connected by edges on the implicit graph described
	 *     by expand()).
	 *
	 *     Returns a List of length 1 [startObj] if startObj lies within the endgame.
	 *     Returns an empty List if there is no path from startObj to the endgame.
	 */
	public List<T> aStar(final T startObj, final Predicate<T> isEndgameCheck, final Function<T, Set<T>> expand,
			final BiFunction<T, T, Double> cost, final Function<T, Double> heuristic) {
		assert false : "Needs implementation!";
		return List.of();
	}
}